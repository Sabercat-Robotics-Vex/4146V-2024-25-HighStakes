{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor MotorDriveFL = motor(PORT12, ratio18_1, true);\n\nmotor MotorDriveFR = motor(PORT2, ratio18_1, false);\n\nmotor MotorDriveBL = motor(PORT19, ratio18_1, false);\n\nmotor MotorDriveBR = motor(PORT9, ratio18_1, true);\n\nmotor MotorGrpLiftMotorA = motor(PORT10, ratio18_1, false);\nmotor MotorGrpLiftMotorB = motor(PORT20, ratio18_1, true);\nmotor_group MotorGrpLift = motor_group(MotorGrpLiftMotorA, MotorGrpLiftMotorB);\n\nmotor MotorGrpClawsMotorA = motor(PORT1, ratio18_1, false);\nmotor MotorGrpClawsMotorB = motor(PORT11, ratio18_1, true);\nmotor_group MotorGrpClaws = motor_group(MotorGrpClawsMotorA, MotorGrpClawsMotorB);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Enum used by the turn helper function in order to make it more readable\nenum TurnDirection\n{\n  CLOCKWISE,\n  COUNTERCLOCKWISE\n};\n\ncompetition Competition;\n// constant data\n// remember to account for the lift gear ratio of 3:7\nconst int maxLiftAngle = 400;\nconst int clawPosArr[3] = {180, 30, 0};\n\n// Drive for [dist] cm in in the [dir] direction\nvoid driveForDist(directionType dir, int dist)\n{\n  // Wheels have a 4\" diameter -> 32 cm circumference\n  MotorDriveFL.spinFor(dir, dist / 32, turns, false);\n  MotorDriveFR.spinFor(dir, dist / 32, turns, false);\n  MotorDriveBL.spinFor(dir, dist / 32, turns, false);\n  MotorDriveBR.spinFor(dir, dist / 32, turns, false);\n}\n\n// Turn for [ang] degrees in specified direction\nvoid turnForAngle(enum TurnDirection dir, int ang)\n{\n  if (dir == CLOCKWISE)\n  {\n    MotorDriveFL.spinFor(forward, ang, degrees, false);\n    MotorDriveFR.spinFor(reverse, ang, degrees, false);\n    MotorDriveBL.spinFor(forward, ang, degrees, false);\n    MotorDriveBR.spinFor(reverse, ang, degrees, false);\n  }\n  else if (dir == COUNTERCLOCKWISE)\n  {\n    MotorDriveFL.spinFor(reverse, ang, degrees, false);\n    MotorDriveFR.spinFor(forward, ang, degrees, false);\n    MotorDriveBL.spinFor(reverse, ang, degrees, false);\n    MotorDriveBR.spinFor(forward, ang, degrees, false);\n  }\n}\n\n// Program start tasks (initialize motors etc)\nvoid pre_auton()\n{\n  MotorDriveFL.setStopping(brake);\n  MotorDriveBL.setStopping(brake);\n  MotorDriveFR.setStopping(brake);\n  MotorDriveBR.setStopping(brake);\n  \n  MotorGrpClaws.setVelocity(55, percent);\n  MotorGrpClaws.setStopping(hold);\n\n  MotorGrpLift.setVelocity(55, percent);\n  MotorGrpLift.setStopping(hold);\n\n  Controller1.Screen.setCursor(3,1);\n  Controller1.Screen.print(\"Auton disabled.\");\n\n  MotorGrpClaws.spinToPosition(clawPosArr[3], degrees);\n}\n\n// Autonomous routine (first 15 seconds)\nvoid auton()\n{\n  // Autonomous script (put actual code later)\n  // raise arm slightly\n  MotorGrpLift.spinFor(forward, 20, degrees);\n  // drive forward\n  driveForDist(forward, 20);\n  // pick up ring\n  MotorGrpLift.spinFor(forward, 50, degrees);\n  // turn around 180\n  turnForAngle(CLOCKWISE, 180);\n  // ring on alliance stake\n  MotorGrpLift.spinFor(reverse, 20, degrees);\n  // drive to left side ring\n  // pick up ring\n  MotorGrpLift.spinFor(forward, 50, degrees);\n  // ring to mobile goal\n  // go sit on ladder\n  // end auton\n}\n\n// Driver control routine (after autonomous period)\nvoid driver()\n{\n  // Claw position variables\n  int clawPos = 2;\n\n  while(true)\n  {\n    // Drivetrain\n    int vPos = Controller1.Axis3.position();\n    int hPos = Controller1.Axis1.position();\n\n    MotorDriveFR.setVelocity(vPos - hPos, percent);\n    MotorDriveBR.setVelocity(vPos - hPos, percent);\n    MotorDriveFL.setVelocity(vPos + hPos, percent);\n    MotorDriveBL.setVelocity(vPos + hPos, percent);\n\n    if (vPos - hPos == 0)\n    {\n      MotorDriveFR.stop();\n      MotorDriveBR.stop();\n    }\n    else\n    {\n      MotorDriveFR.spin(forward);\n      MotorDriveBR.spin(forward);\n    }\n    \n    if (vPos + hPos == 0)\n    {\n      MotorDriveFL.stop();\n      MotorDriveBL.stop();\n    }\n    else\n    {\n      MotorDriveFL.spin(forward);\n      MotorDriveBL.spin(forward);\n    }\n\n    // Scissor lifts\n    if (Controller1.ButtonL1.pressing() && !Controller1.ButtonL2.pressing() && MotorGrpLift.position(degrees) < maxLiftAngle)\n    {\n      MotorGrpLift.spin(forward);\n    }\n    else if (Controller1.ButtonL2.pressing() && !Controller1.ButtonL1.pressing() && MotorGrpLift.position(degrees) > 0)\n    {\n      MotorGrpLift.spin(reverse);\n    }\n    else if ((MotorGrpLift.position(degrees) >= maxLiftAngle && Controller1.ButtonL1.pressing()) || (MotorGrpLift.position(degrees) <= 0 && Controller1.ButtonL2.pressing()) || !(Controller1.ButtonL1.pressing() || Controller1.ButtonL2.pressing()))\n    {\n      MotorGrpLift.stop();\n    }\n\n    // Right claw\n    if (Controller1.ButtonR1.pressing() && !Controller1.ButtonR2.pressing() && !MotorGrpClaws.isSpinning()) {\n      clawPos++;\n      if (clawPos >= sizeof(clawPosArr) / 4) {\n        clawPos = 0;\n      }\n      MotorGrpClaws.spinToPosition(clawPosArr[clawPos], degrees, false);\n    }\n    else if (Controller1.ButtonR2.pressing() && !MotorGrpClaws.isSpinning()) {\n      clawPos--;\n      if (clawPos < 0) {\n        clawPos = sizeof(clawPosArr) / 4 - 1;\n      }\n      MotorGrpClaws.spinToPosition(clawPosArr[clawPos], degrees, false);\n    }\n\n    wait(20, msec);\n  }\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  bool autonEnabled = true;\n\n  pre_auton();\n  \n  // while (!Controller1.ButtonA.pressing() && !Controller1.ButtonB.pressing()) {}\n  // if (Controller1.ButtonB.pressing()) {\n  //   autonEnabled = false;\n  //   Controller1.Screen.clearLine(3);\n  //   Controller1.Screen.setCursor(3, 1);\n  //   Controller1.Screen.print(\"Auton disabled.\");\n  // }\n  // else\n  // {\n  //   Controller1.Screen.clearLine(3);\n  //   Controller1.Screen.setCursor(3,1);\n  //   Controller1.Screen.print(\"Auton enabled.\");\n  // }\n\n  if (autonEnabled)\n  {\n    Competition.autonomous(auton);\n  }\n\n  Competition.drivercontrol(driver);\n}\n","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[12],"name":"MotorDriveFL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"MotorDriveFR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[19],"name":"MotorDriveBL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"MotorDriveBR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10,20],"name":"MotorGrpLift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[1,11],"name":"MotorGrpClaws","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"}}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}