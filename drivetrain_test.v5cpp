{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor MotorDriveFL = motor(PORT1, ratio18_1, false);\n\nmotor MotorDriveFR = motor(PORT2, ratio18_1, false);\n\nmotor MotorDriveBL = motor(PORT3, ratio18_1, false);\n\nmotor MotorDriveBR = motor(PORT4, ratio18_1, false);\n\nmotor MotorLiftPivot = motor(PORT5, ratio36_1, false);\n\nmotor MotorLiftExtend = motor(PORT6, ratio18_1, false);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Competition event handlers\ncompetition Competition;\n\n// Run this when the code is started\nvoid pre_auton(void)\n{\n  MotorDriveFL.setStopping(brake);\n  MotorDriveBL.setStopping(brake);\n  MotorDriveFR.setStopping(brake);\n  MotorDriveBR.setStopping(brake);\n}\n\n// Autonomous routine\nvoid auton(void)\n{\n  // ..........................................................................\n  // Insert autonomous user code here.\n  // ..........................................................................\n}\n\n// Driver control routine\nvoid driver(void)\n{\n  while (true)\n  {\n    int vPos = Controller1.Axis3.position();\n    int hPos = Controller1.Axis1.position();\n\n    MotorDriveFR.setVelocity(vPos - hPos, percent);\n    MotorDriveBR.setVelocity(vPos - hPos, percent);\n    MotorDriveFL.setVelocity(vPos + hPos, percent);\n    MotorDriveBL.setVelocity(vPos + hPos, percent);\n\n    if (vPos - hPos == 0)\n    {\n      MotorDriveFR.stop();\n      MotorDriveBR.stop();\n    }\n    else\n    {\n      MotorDriveFR.spin(forward);\n      MotorDriveBR.spin(forward);\n    }\n    \n    if (vPos + hPos == 0)\n    {\n      MotorDriveFL.stop();\n      MotorDriveBL.stop();\n    }\n    else\n    {\n      MotorDriveFL.spin(forward);\n      MotorDriveBL.spin(forward);\n    }\n\n    // Wait to not overclock the brain\n    wait(20, msec);\n  }\n}\n\n// Main will set up the competition functions and callbacks.\n\nint main() {\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(auton);\n  Competition.drivercontrol(driver);\n\n  // Event handlers\n\n  // Run the pre-autonomous function.\n  pre_auton();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}\n","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[1],"name":"MotorDriveFL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}},{"port":[2],"name":"MotorDriveFR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}},{"port":[3],"name":"MotorDriveBL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}},{"port":[4],"name":"MotorDriveBR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}},{"port":[5],"name":"MotorLiftPivot","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[6],"name":"MotorLiftExtend","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}